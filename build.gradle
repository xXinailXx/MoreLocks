plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = '0.1.0'
group = 'net.xXinailXx.more_locks'

base {
    archivesName = 'more_locks'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    add sourceSets.main, "more_locks.refmap.json"
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'more_locks'

            mods {
                "more_locks" {
                    source sourceSets.main
                }
            }
        }

        client {
            arg "-mixin.config=more_locks.mixins.json"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            property 'forge.enabledGameTestNamespaces', 'more_locks'
        }

        server {
            arg "-mixin.config=more_locks.mixins.json"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            property 'forge.enabledGameTestNamespaces', 'more_locks'
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', 'more_locks'
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', 'more_locks', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
     flatDir {
         dir 'libs'
     }
    mavenCentral()
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name 'Blamejared Maven'
        url 'https://maven.blamejared.com'
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:0.8.4:processor"
    }

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation 'org.jetbrains:annotations:20.1.0'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

    implementation fg.deobf("curse.maven:jei-238222:4405346")
    implementation fg.deobf("curse.maven:hammerlib-247401:4558470")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19.2-5.1.6.4")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19.2-5.1.6.4:api")

    if (file("libs").isDirectory()) {
        file("libs").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")

            if (file.name != "desktop.ini") {
                println file.name

                def modartifact = file.name.substring(0, splitPos)
                def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
                def modreference = "lib:$modartifact:$modversion"

                dependencies {
                    implementation fg.deobf(project.dependencies.create(modreference) {
                        transitive = false
                    })
                }
            }
        }
    } else file("libs").mkdir()
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "MixinConfigs"            : "more_locks.mixins.json",
                'Specification-Title'     : 'more_locks',
                'Specification-Vendor'    : 'xXinailXx',
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : 'xXinailXx',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
